{"version":3,"sources":["instagramByAccount.js"],"names":["$","document","ready","it","$wrapper","$container","find","$loading","$token","attr","$user","$isMobile","window","matchMedia","$accountName","trim","$batchClass","$number","$numbers","parseInt","$cachedWidth","prop","getInstagramByAccount","access_token","empty","$url","ajax","url","type","dataType","success","data","hide","i","img","images","standard_resolution","link","caption","text","append","batch","each","k","e","addClass","appendTo","wrapInner","error","xhr","status","console","log","responseText","complete","rotator","fn","options","extend","blocks","speed","fadeSpeed","rotate","element","len","length","index","fadeIn","timer","setInterval","block","eq","clearInterval","fadeOut","this","elem","css","click","y","max","offset","top","outerHeight","min","pageY","location","href","onresize","$newWidth","show","clearTimeout","setTimeout","jQuery"],"mappings":"CAYA,SAAWA,GACT,aACAA,EAAEC,UAAUC,MAAM,WAChB,IAuHIC,EAvHAC,EAAWJ,EAAE,OACbK,EAAaD,EAASE,KAAK,aAC3BC,EAAWH,EAASE,KAAK,eACzBE,EAASJ,EAASK,KAAK,cACvBC,EAAQN,EAASK,KAAK,gBAEtBE,EAAwD,aAApCP,EAASK,KAAK,qBAA4F,IAArDG,OAAOC,WAAW,sBAA6B,QACxHC,OAAiC,IAAVJ,EAAyB,2BAA6BA,EAAMK,OACnFC,EAAc,QACdC,EAAUb,EAASK,KAAK,eAIxBS,EAAYN,OAAOC,WAAW,sBAA6B,QAAI,EAAIM,SAASF,EAAS,IACrFG,EAAepB,EAAE,QAAQqB,KAAK,eAIlC,SAASC,EAAsBC,GAE7B,IAAkB,IAAdZ,IAGJN,EAAWmB,QACPD,GAAc,CAChB,IAAIE,EAAO,sEAAwEF,EACnFvB,EAAE0B,KAAK,CACLC,IAAKF,EACLG,KAAM,MACNC,SAAU,QACVC,QAAS,SAAUC,GAEjBxB,EAASyB,OACT,IAAK,IAAIC,EAAI,EAAGA,EAtBV,GAsBuBA,IAAK,CAChC,IAAIC,EAAMH,EAAKA,KAAKE,GAAGE,OAAOC,oBAAoBT,IAC9CU,EAAON,EAAKA,KAAKE,GAAGI,KACbN,EAAKA,KAAKE,GAAGK,QAAQC,KAChClC,EAAWmC,OAAO,YAAcH,EAAO,8CAAgDH,EAAM,UAAYxB,EAAQ,UAEnH,IAAI+B,EACJzC,EAAE,IAAKK,GAAYqC,KAAK,SAAUC,EAAGC,GAC/BD,EAAIzB,GAAY,IAClBuB,EAAQzC,EAAE,UAAU6C,SAAS7B,GAAa8B,SAASzC,IAErDoC,EAAMD,OAAOI,KAGf5C,EAAE,IAAMgB,GAAa+B,UADV,8BAGbC,MAAO,SAAUC,EAAKC,EAAQF,GAC5BG,QAAQC,IAAIH,EAAII,eAElBC,SAAU,WACRjD,EAAWkD,cAMnBvD,EAAEwD,GAAGD,QAAU,SAAUE,GACvBA,EAAUzD,EAAE0D,OAAO,CACjBC,OAAQvD,EAASE,KAAK,IAAMU,GAC5B4C,MAAO,IACPC,UAAW,KACVJ,GACH,IAOIK,EAAS,SAAUC,GACrB,IAAIJ,EAAS3D,EAAEyD,EAAQE,OAAQI,GAC7BC,EAAML,EAAOM,OACbC,GAAS,EACXP,EAAOQ,OAAOV,EAAQI,WACtB,IAAIO,EAAQC,YAAY,WACtBH,IACA,IAAII,EAAQX,EAAOY,GAAGL,GAClBA,GAASF,IACXQ,cAAcJ,GACdN,EAAOC,IAELO,EAAMJ,SAAYF,EAAM,GAC1BM,EAAMG,QAAQhB,EAAQI,YAEvBJ,EAAQG,QAEb,OAAOc,KAAKhC,KAAK,WACf,IAzBwBqB,EACpBG,EAwBAS,EAAO3E,EAAE0E,MAzBWX,EA0BdY,EAzBNT,EAAQlE,EAAEyD,EAAQE,OAAQI,GAASE,OACvCjE,EAAEyD,EAAQE,OAAQI,GAASrB,KAAK,WAC9BwB,IACAlE,EAAE0E,MAAME,IAAI,SAAUV,KAuBxBJ,EAAOa,MAIPnE,GAEFc,EAAsBd,GAKxBJ,EAASyE,MAAM,SAAUjC,GAGvB,IAG2BkC,EAHvBC,EAAM/E,EAAE0E,MAAMM,SAASC,IAAMjF,EAAE0E,MAAMQ,cACrCC,EAAMJ,EAAM,GAEWD,EAGZlC,EAAEwC,MAFFD,GAALL,GAAYA,GAAKC,IAIzBM,SAASC,KAAO,6BAA+BxE,KAOnDF,OAAO2E,SAAW,WAChB,IAAIC,EAAYxF,EAAE,QAAQqB,KAAK,eAC3BmE,IAAcpE,IAChBb,EAASkF,OACTC,aAAavF,GACbA,EAAKwF,WAAW,WACdrE,EAAsBd,IACrB,KACHY,EAAeoE,MApIvB,CAyIGI","file":"instagramByAccount.min.js","sourcesContent":["/* NEL, KU KOM Script to fetch images from Instagram by access token.\n * Login to Instagram to register an application and generate an access token using this url - replace with your values:\n * https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token\n * Needs html like this: <div id=\"ig\" data-account=\"university_of_copenhagen\" data-token=\"xxxx\" data-images=\"3\" data-hidemobile=\"false\" class=\"gridbox with-img size2\">\n   <div class=\"box1\">\n     <a href=\"https://www.instagram.com/university_of_copenhagen/\">\n       <div class=\"header\">@university_of_copenhagen p√• Instagram</div>\n     </a>\n   </div>\n     <div id=\"imageBox\"></div>\n </div>\n The property data-account represents the account name to search for. data-images pepresents the number of images to display at a time. */\n(function ($) {\n  'use strict';\n  $(document).ready(function () {\n    var $wrapper = $(\"#ig\");\n    var $container = $wrapper.find(\"#imageBox\");\n    var $loading = $wrapper.find(\".ku-loading\");\n    var $token = $wrapper.attr(\"data-token\");\n    var $user = $wrapper.attr(\"data-account\");\n    // $isMobile must be true or null and in mobile view to be true\n    var $isMobile = (typeof $wrapper.attr(\"data-hidemobile\") == null || true && (window.matchMedia('(max-width: 767px)').matches) === true) ? true : false;\n    var $accountName = (typeof $user === 'undefined') ? 'university_of_copenhagen' : $user.trim();\n    var $batchClass = \"batch\";\n    var $number = $wrapper.attr(\"data-images\");\n    //$number = $number.toString();\n    var $images = 12;\n    // We always display 2 images on mobile\n    var $numbers = (window.matchMedia('(max-width: 480px)').matches) ? 2 : parseInt($number, 10);\n    var $cachedWidth = $('body').prop('clientWidth');\n\n\n\n    function getInstagramByAccount(access_token) {\n      // Fetch Instagram images by hashtag\n      if ($isMobile === true) {\n        return //Don't run on mobile\n      }\n      $container.empty();\n      if (access_token) {\n        var $url = \"https://api.instagram.com/v1/users/self/media/recent/?access_token=\" + access_token;\n        $.ajax({\n          url: $url,\n          type: 'GET',\n          dataType: \"jsonp\",\n          success: function (data) {\n            //console.log(data);\n            $loading.hide();\n            for (var i = 0; i < $images; i++) {\n              var img = data.data[i].images.standard_resolution.url;\n              var link = data.data[i].link;\n              var desc = data.data[i].caption.text;\n              $container.append('<a href=\"' + link + '\" rel=\"noopener\" target=\"_blank\"><img src=\"' + img + '\" alt=\"' + $user + '\"></a>');\n            }\n            var batch;\n            $('a', $container).each(function (k, e) {\n              if (k % $numbers == 0) {\n                batch = $('<div/>').addClass($batchClass).appendTo($container);\n              }\n              batch.append(e);\n            });\n            var wrap = \"<div class='inner'></div>\";\n            $('.' + $batchClass).wrapInner(wrap);\n          },\n          error: function (xhr, status, error) {\n            console.log(xhr.responseText);\n          },\n          complete: function () {\n            $container.rotator();\n          }\n        });\n      }\n    }\n\n    $.fn.rotator = function (options) {\n      options = $.extend({\n        blocks: $wrapper.find('.' + $batchClass),\n        speed: 6000,\n        fadeSpeed: 800\n      }, options);\n      var setZIndex = function (element) {\n        var index = $(options.blocks, element).length;\n        $(options.blocks, element).each(function () {\n          index--;\n          $(this).css('zIndex', index);\n        });\n      };\n      var rotate = function (element) {\n        var blocks = $(options.blocks, element),\n          len = blocks.length,\n          index = -1;\n        blocks.fadeIn(options.fadeSpeed);\n        var timer = setInterval(function () {\n          index++;\n          var block = blocks.eq(index);\n          if (index == len) {\n            clearInterval(timer);\n            rotate(element);\n          }\n          if (block.index() != (len - 1)) {\n            block.fadeOut(options.fadeSpeed);\n          }\n        }, options.speed);\n      };\n      return this.each(function () {\n        var elem = $(this);\n        setZIndex(elem);\n        rotate(elem);\n      });\n    };\n\n    if ($token) {\n      // Init script\n      getInstagramByAccount($token);\n    } else {\n      //console.log('Add Instagram access token and number of images to display using data-token=\"\" and data-images=\"\" on the container.');\n    }\n\n    $wrapper.click(function (e) {\n      // Action when gridbox arrow is clicked\n      // clickable range - never changes\n      var max = $(this).offset().top + $(this).outerHeight();\n      var min = max - 30; // 30 is the height of the ::before arrow\n\n      var checkRange = function (y) {\n        return (y >= min && y <= max);\n      };\n      if (checkRange(e.pageY)) {\n        // do click action\n        location.href = \"https://www.instagram.com/\" + $accountName;\n      }\n    });\n\n    //On resize, wait and reload function\n    var it;\n\n    window.onresize = function () {\n      var $newWidth = $('body').prop('clientWidth');\n      if ($newWidth !== $cachedWidth) {\n        $loading.show();\n        clearTimeout(it);\n        it = setTimeout(function () {\n          getInstagramByAccount($token);\n        }, 200);\n        $cachedWidth = $newWidth;\n      }\n    };\n  });\n\n})(jQuery);\n"]}