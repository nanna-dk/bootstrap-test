{"version":3,"sources":["videoControls.js"],"names":["video","playPauseBtn","muteBtn","volumeBtn","progressBar","fullScreen","initialisevideo","document","getElementById","controls","addEventListener","updateProgressBar","changeButtonType","this","pause","togglePlayPause","paused","ended","play","stopPlayer","currentTime","setVolume","v","muted","vol","volume","title","setAttribute","toggleMute","replayMedia","resetPlayer","percentage","Math","floor","duration","value","style","width","querySelector","innerHTML","btn","upperCaseFirst","className","span","classList","forEach","startsWith","remove","add","loadVideo","i","arguments","length","file","split","ext","canPlayVideo","src","load","canPlayType","handleFullscreen","mozRequestFullScreen","webkitEnterFullScreen","webkitRequestFullScreen","msRequestFullscreen","str","charAt","toUpperCase","substring"],"mappings":"AAIA,IAAIA,MACFC,aACAC,QACAC,UACAC,YACAC,WAOEC,gBAAkB,WAEpBN,MAAQO,SAASC,eAAe,SAGhCP,aAAeM,SAASC,eAAe,qBACvCN,QAAUK,SAASC,eAAe,eAClCL,UAAYI,SAASC,eAAe,eACpCJ,YAAcG,SAASC,eAAe,gBACtCH,WAAaE,SAASC,eAAe,qBAGrCR,MAAMS,UAAW,EAGjBT,MAAMU,iBAAiB,aAAcC,mBAAmB,GAGxDX,MAAMU,iBAAiB,OAAQ,WAE7BE,iBAAiBX,aAAc,WAC9B,GAEHD,MAAMU,iBAAiB,QAAS,WAE9BE,iBAAiBX,aAAc,UAC9B,GAEHD,MAAMU,iBAAiB,QAAS,WAC9BG,KAAKC,UACJ,IAGDC,gBAAkB,WAEhBf,MAAMgB,QAAUhB,MAAMiB,OAExBL,iBAAiBX,aAAc,SAE/BD,MAAMkB,SAKNN,iBAAiBX,aAAc,QAE/BD,MAAMc,UAKNK,WAAa,WACfnB,MAAMc,QACNd,MAAMoB,YAAc,GAIlBC,UAAY,SAAUC,GACxBtB,MAAMuB,OAAQ,EACd,IAAIC,EAAMF,EAAI,IACdtB,MAAMyB,OAASD,EACfrB,UAAUuB,MAAQ,WAAaJ,EAAI,IACnCnB,UAAUwB,aAAa,gBAAiBH,IAItCI,WAAa,WACX5B,MAAMuB,OAERX,iBAAiBV,QAAS,aAC1BA,QAAQwB,MAAQ,SAEhB1B,MAAMuB,OAAQ,IAGdX,iBAAiBV,QAAS,cAC1BA,QAAQwB,MAAQ,OAEhB1B,MAAMuB,OAAQ,IAKdM,YAAc,WAChBC,cACA9B,MAAMkB,QAIJP,kBAAoB,WAEtB,IAAIoB,EAAaC,KAAKC,MAAO,IAAMjC,MAAMkC,SAAYlC,MAAMoB,aAE3DhB,YAAY+B,MAAQJ,EACpB3B,YAAYgC,MAAMC,MAAQN,EAAa,IACvC3B,YAAYuB,aAAa,gBAAiBI,GAC1C3B,YAAYsB,MAAQK,EAAa,IACpB3B,YAAYkC,cAAc,YAChCC,UAAYR,EAAa,eAI9BnB,iBAAmB,SAAU4B,EAAKL,GACpCK,EAAId,MAAQe,eAAeN,GAC3BK,EAAIE,UAAYP,EAChBK,EAAIb,aAAa,aAAcc,eAAeN,IAE9C,IAAIQ,EAAOH,EAAIF,cAAc,cAE7BK,EAAKC,UAAUC,QAAQ,SAAUH,GAC3BA,EAAUI,WAAW,eACvBH,EAAKC,UAAUG,OAAOL,KAG1BC,EAAKC,UAAUI,IAAI,aAAeb,IAIhCc,UAAY,WACd,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAOF,UAAUD,GAAGI,MAAM,KAC1BC,EAAMF,EAAKA,EAAKD,OAAS,GAE7B,GAAII,aAAaD,GAAM,CAErBzB,cACA9B,MAAMyD,IAAMN,UAAUD,GACtBlD,MAAM0D,OACN,SAMFF,aAAe,SAAUD,GAE3B,MAAkB,IADDvD,MAAM2D,YAAY,SAAWJ,IAU5CzB,YAAc,WAEhB1B,YAAY+B,MAAQ,EAEpBnC,MAAMoB,YAAc,EAEpBL,mBAIE6C,iBAAmB,WACjB5D,MAAM6D,qBACR7D,MAAM6D,uBACG7D,MAAM8D,sBACf9D,MAAM8D,wBACG9D,MAAM+D,wBACf/D,MAAM+D,0BACG/D,MAAMgE,qBACfhE,MAAMgE,uBAKNvB,eAAiB,SAAUwB,GAC7B,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,UAAU,IAIrD7D,SAASG,iBAAiB,mBAAoB,WAC5C,aACAJ,oBACC","file":"videoControls.min.js","sourcesContent":["/* Media Player controls using HTML5's Media API\n * Modified for Bootstrap by Nanna Ellegaard 2019\n */\n\nvar video,\n  playPauseBtn,\n  muteBtn,\n  volumeBtn,\n  progressBar,\n  fullScreen,\n  updateProgressBar,\n  changeButtonType,\n  canPlayVideo,\n  resetPlayer,\n  upperCaseFirst;\n\nvar initialisevideo = function () {\n  // Get player id\n  video = document.getElementById('video');\n\n  // Get handles to each of the buttons and required elements\n  playPauseBtn = document.getElementById('play-pause-button');\n  muteBtn = document.getElementById('mute-button');\n  volumeBtn = document.getElementById('vol-control');\n  progressBar = document.getElementById('progress-bar');\n  fullScreen = document.getElementById('fullscreen-button');\n\n  // Hide the browser's default controls\n  video.controls = false;\n\n  // Add a listener for the timeupdate event so we can update the progress bar\n  video.addEventListener('timeupdate', updateProgressBar, false);\n\n  // Add a listener for the play and pause events so the buttons state can be updated\n  video.addEventListener('play', function () {\n    // Change the button to be a pause button\n    changeButtonType(playPauseBtn, 'pause');\n  }, false);\n\n  video.addEventListener('pause', function () {\n    // If paused, change the button to be a play button\n    changeButtonType(playPauseBtn, 'play');\n  }, false);\n\n  video.addEventListener('ended', function () {\n    this.pause();\n  }, false);\n};\n\nvar togglePlayPause = function () {\n  // If the video is currently paused or has ended\n  if (video.paused || video.ended) {\n    // Change the button to be a pause button\n    changeButtonType(playPauseBtn, 'pause');\n    // Play the media\n    video.play();\n  }\n  // Otherwise it must currently be playing\n  else {\n    // Change the button to be a play button\n    changeButtonType(playPauseBtn, 'play');\n    // Pause the media\n    video.pause();\n  }\n};\n\n// Stop the current media from playing, and return it to the start position\nvar stopPlayer = function () {\n  video.pause();\n  video.currentTime = 0;\n};\n\n// Changes the volume on the media player using a slider\nvar setVolume = function (v) {\n  video.muted = false;\n  var vol = v / 100;\n  video.volume = vol;\n  volumeBtn.title = 'Volume: ' + v + '%'\n  volumeBtn.setAttribute(\"aria-valuenow\", vol);\n};\n\n// Toggles the media player's mute and unmute status\nvar toggleMute = function () {\n  if (video.muted) {\n    // Change the cutton to be a mute button\n    changeButtonType(muteBtn, 'volume-up');\n    muteBtn.title = 'Unmute';\n    // Unmute the media player\n    video.muted = false;\n  } else {\n    // Change the button to be an unmute button\n    changeButtonType(muteBtn, 'volume-off');\n    muteBtn.title = 'Mute';\n    // Mute the media player\n    video.muted = true;\n  }\n};\n\n// Replays the media currently loaded in the player\nvar replayMedia = function () {\n  resetPlayer();\n  video.play();\n};\n\n// Update the progress bar\nvar updateProgressBar = function () {\n  // Work out how much of the media has played via the duration and currentTime parameters\n  var percentage = Math.floor((100 / video.duration) * video.currentTime);\n  // Update the progress bar with current values\n  progressBar.value = percentage;\n  progressBar.style.width = percentage + '%';\n  progressBar.setAttribute(\"aria-valuenow\", percentage);\n  progressBar.title = percentage + '%';\n  var sronly = progressBar.querySelector('.sr-only');\n  sronly.innerHTML = percentage + \"% afspillet\";\n};\n\n// Updates a button's title, innerHTML and CSS class to a certain value\nvar changeButtonType = function (btn, value) {\n  btn.title = upperCaseFirst(value);\n  btn.className = value;\n  btn.setAttribute(\"aria-label\", upperCaseFirst(value));\n  // All available glyphicons\n  var span = btn.querySelector('.glyphicon');\n  // remove glyphicons before adding new\n  span.classList.forEach(function (className) {\n    if (className.startsWith('glyphicon-')) {\n      span.classList.remove(className);\n    }\n  });\n  span.classList.add(\"glyphicon-\" + value);\n};\n\n// Loads a video item into the media player\nvar loadVideo = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    var file = arguments[i].split('.');\n    var ext = file[file.length - 1];\n    // Check if this media can be played\n    if (canPlayVideo(ext)) {\n      // Reset the player, change the source file and load it\n      resetPlayer();\n      video.src = arguments[i];\n      video.load();\n      break;\n    }\n  }\n};\n\n// Checks if the browser can play this particular type of file or not\nvar canPlayVideo = function (ext) {\n  var ableToPlay = video.canPlayType('video/' + ext);\n  if (ableToPlay == '') {\n    //Eempty string: The specified media type definitely cannot be played.\n    return false;\n  } else {\n    return true;\n  }\n};\n\n// Resets the media player\nvar resetPlayer = function () {\n  // Reset the progress bar to 0\n  progressBar.value = 0;\n  // Move the media back to the start\n  video.currentTime = 0;\n  // Check if button is play or pause\n  togglePlayPause();\n};\n\n// Fullscreen for various browsers\nvar handleFullscreen = function () {\n  if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  } else if (video.webkitEnterFullScreen) {\n    video.webkitEnterFullScreen();\n  } else if (video.webkitRequestFullScreen) {\n    video.webkitRequestFullScreen();\n  } else if (video.msRequestFullscreen) {\n    video.msRequestFullscreen()\n  }\n};\n\n// Make attributes values first letter uppercase because it looks nice\nvar upperCaseFirst = function (str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\n// Initialize the player when the DOM is ready\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  'use strict';\n  initialisevideo();\n}, false);\n"]}